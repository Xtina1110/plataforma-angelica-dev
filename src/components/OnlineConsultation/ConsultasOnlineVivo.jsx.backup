import React, { useState, useEffect, useRef } from 'react';
import {
  Video, VideoOff, Mic, MicOff, PhoneOff,
  MessageSquare, Share2, Download, Clock, DollarSign,
  Users, Star, Heart, Sparkles, Calendar, CheckCircle, ArrowLeft, Menu, X
} from 'lucide-react';
import { useBookings } from '../../hooks/useBookings';
import AppSidebar from '../AppSidebar';
import DurationSelector from '../BookingSystem/DurationSelector';
import BookingCalendar from '../BookingSystem/BookingCalendar';
import AngelicalModal from '../AngelicalModal';

const ConsultasOnlineVivo = ({ user, onLogout }) => {
  const [currentStep, setCurrentStep] = useState('duration');
  const [sessionActive, setSessionActive] = useState(false);
  const [sessionTime, setSessionTime] = useState(0);
  const [videoEnabled, setVideoEnabled] = useState(true);
  const [audioEnabled, setAudioEnabled] = useState(true);
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState('');
  const [showExtensionModal, setShowExtensionModal] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [sharedCards, setSharedCards] = useState([]);
  const [showResultModal, setShowResultModal] = useState(false);
  const [resultInfo, setResultInfo] = useState(null);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const chatRef = useRef(null);

  const {
    services,
    therapists,
    loading,
    selectedService,
    selectedTherapist,
    selectedDate,
    selectedTime,
    availableSlots,
    setSelectedService,
    setSelectedTherapist,
    setSelectedDate,
    setSelectedTime,
    createBooking
  } = useBookings();

  const extensions = [
    { duration: 15, price: 50, label: '+15 min' },
    { duration: 30, price: 95, label: '+30 min' },
    { duration: 45, price: 130, label: '+45 min' }
  ];

  const steps = [
    { id: 'duration', name: 'Duración', icon: Clock },
    { id: 'calendar', name: 'Reserva', icon: Calendar },
    { id: 'confirmation', name: 'Pago', icon: DollarSign },
    { id: 'session', name: 'Sesión', icon: Video }
  ];

  const startSession = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true
      });

      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      setSessionActive(true);
      setIsRecording(true);
      setCurrentStep('session');

      const timer = setInterval(() => {
        setSessionTime(prev => prev + 1);
      }, 1000);

      return () => clearInterval(timer);
    } catch (error) {
      console.error('Error accessing media devices:', error);
      setResultInfo({
        type: 'error',
        title: 'Error de Acceso',
        message: 'No se pudo acceder a la cámara y micrófono. Por favor, verifica los permisos de tu navegador.'
      });
      setShowResultModal(true);
    }
  };

  const endSession = () => {
    if (localVideoRef.current && localVideoRef.current.srcObject) {
      const tracks = localVideoRef.current.srcObject.getTracks();
      tracks.forEach(track => track.stop());
    }

    setSessionActive(false);
    setIsRecording(false);
    setResultInfo({
      type: 'success',
      title: 'Sesión Finalizada',
      message: 'Tu consulta angelical ha sido completada. La grabación estará disponible en tu dashboard.'
    });
    setShowResultModal(true);

    setTimeout(() => {
      setCurrentStep('duration');
      setSessionTime(0);
      setSelectedService(null);
      setSelectedTherapist(null);
      setSelectedDate(null);
      setSelectedTime(null);
    }, 3000);
  };

  const sendChatMessage = () => {
    if (chatInput.trim()) {
      const newMessage = {
        id: Date.now(),
        text: chatInput,
        sender: 'user',
        timestamp: new Date().toLocaleTimeString()
      };
      setChatMessages(prev => [...prev, newMessage]);
      setChatInput('');

      setTimeout(() => {
        if (chatRef.current) {
          chatRef.current.scrollTop = chatRef.current.scrollHeight;
        }
      }, 100);
    }
  };

  const shareCardAR = (cardName) => {
    const card = { name: cardName, icon: '🌟', timestamp: Date.now() };
    setSharedCards(prev => [...prev, card]);

    const readerMessage = {
      id: Date.now(),
      text: `He compartido la carta "${cardName}" contigo. Puedes verla en realidad aumentada.`,
      sender: 'reader',
      timestamp: new Date().toLocaleTimeString(),
      cardData: card
    };
    setChatMessages(prev => [...prev, readerMessage]);
  };

  const handleConfirmBooking = async () => {
    try {
      const bookingData = {
        service_id: selectedService.id,
        therapist_id: selectedTherapist.id,
        booking_date: selectedDate,
        start_time: selectedTime,
        duration: selectedService.duration,
        total_price: selectedService.price,
        notes: 'Consulta Online en Vivo - Apertura Angelical'
      };

      await createBooking(bookingData);

      setResultInfo({
        type: 'success',
        title: 'Reserva Confirmada',
        message: 'Tu consulta angelical ha sido reservada exitosamente. Recibirás un correo con los detalles de conexión.'
      });
      setShowResultModal(true);

      setTimeout(() => {
        setCurrentStep('confirmation');
      }, 2000);
    } catch (error) {
      console.error('Error creating booking:', error);
      setResultInfo({
        type: 'error',
        title: 'Error en la Reserva',
        message: 'No se pudo completar tu reserva. Por favor, intenta nuevamente.'
      });
      setShowResultModal(true);
    }
  };

  const handleExtendSession = (extension) => {
    setShowExtensionModal(false);
    setResultInfo({
      type: 'success',
      title: 'Sesión Extendida',
      message: `Se han agregado ${extension.duration} minutos adicionales a tu consulta.`
    });
    setShowResultModal(true);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const baseSessionTime = selectedService ? selectedService.duration * 60 : 3600;

  useEffect(() => {
    if (sessionTime > baseSessionTime - 300 && !showExtensionModal && sessionActive) {
      setShowExtensionModal(true);
    }
  }, [sessionTime, baseSessionTime, showExtensionModal, sessionActive]);

  const renderStepIndicator = () => (
    <div className="bg-white/95 backdrop-blur-sm rounded-2xl shadow-lg p-6 mb-8 border-2" style={{ borderColor: '#FFD700' }}>
      <div className="flex justify-between items-center">
        {steps.map((step, index) => {
          const Icon = step.icon;
          const isActive = step.id === currentStep;
          const isCompleted = steps.findIndex(s => s.id === currentStep) > index;

          return (
            <React.Fragment key={step.id}>
              <div className="flex flex-col items-center flex-1">
                <div
                  className={`w-12 h-12 rounded-full flex items-center justify-center mb-2 transition-all ${
                    isActive
                      ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg scale-110'
                      : isCompleted
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-200 text-gray-400'
                  }`}
                >
                  {isCompleted ? <CheckCircle className="w-6 h-6" /> : <Icon className="w-6 h-6" />}
                </div>
                <span
                  className={`text-sm font-medium ${
                    isActive ? 'text-purple-700' : isCompleted ? 'text-green-600' : 'text-gray-500'
                  }`}
                >
                  {step.name}
                </span>
              </div>
              {index < steps.length - 1 && (
                <div className={`flex-1 h-1 mx-2 rounded ${isCompleted ? 'bg-green-500' : 'bg-gray-200'}`} />
              )}
            </React.Fragment>
          );
        })}
      </div>
    </div>
  );

  return (
    <div className="flex h-screen overflow-hidden">
      {/* Sidebar */}
      <div className={`fixed inset-y-0 left-0 z-50 transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:relative lg:translate-x-0 transition-transform duration-300`}>
        <AppSidebar user={user} onLogout={onLogout} />
      </div>

      {/* Overlay para móvil */}
      {isSidebarOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40 lg:hidden"
          onClick={() => setIsSidebarOpen(false)}
        />
      )}

      {/* Contenido principal */}
      <div className="flex-1 overflow-auto" style={{
        backgroundImage: 'url(/FondoMarmoleado02.png)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundAttachment: 'fixed'
      }}>
        {/* Botón menú móvil */}
        <button
          onClick={() => setIsSidebarOpen(!isSidebarOpen)}
          className="lg:hidden fixed top-4 left-4 z-30 p-3 bg-white/90 backdrop-blur-sm rounded-full shadow-lg"
          style={{ color: '#6E3CBC' }}
        >
          {isSidebarOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
        </button>

        <div className="relative z-10 px-4 py-8 lg:px-8">
          <div className="max-w-7xl mx-auto">
            {/* Header */}
            <div className="text-center mb-8">
              <div className="inline-flex items-center gap-2 bg-white/90 backdrop-blur-sm px-6 py-3 rounded-full shadow-lg mb-6">
                <Video className="w-5 h-5" style={{ color: '#FFD700' }} />
                <span className="font-medium" style={{ color: '#6E3CBC' }}>Consulta Online en Vivo</span>
              </div>
              <h2 className="text-4xl font-bold mb-4" style={{ color: '#6E3CBC' }}>
                Apertura Angelical en Videoconferencia HD
              </h2>
              <p className="text-gray-700 text-lg max-w-3xl mx-auto">
                Conecta con lectores especializados para una experiencia personalizada con videoconferencia HD,
                realidad aumentada y grabación completa de tu sesión angelical.
              </p>
            </div>

            {/* Indicador de pasos */}
            {currentStep !== 'session' && renderStepIndicator()}

            {/* Paso 1: Selección de Duración */}
            {currentStep === 'duration' && (
              <div className="space-y-8">
                <DurationSelector
                  services={services}
                  selectedService={selectedService}
                  onSelectService={setSelectedService}
                />

                {selectedService && (
                  <div className="flex justify-end gap-4">
                    <button
                      onClick={() => setCurrentStep('calendar')}
                      className="inline-flex items-center gap-3 px-8 py-4 text-white font-semibold rounded-2xl shadow-lg hover:shadow-xl transform transition-all duration-200 hover:scale-105"
                      style={{
                        background: 'linear-gradient(135deg, #6E3CBC, #9C27B0)',
                        color: 'white'
                      }}
                    >
                      <Calendar className="w-6 h-6" />
                      <span>Continuar a Reserva</span>
                    </button>
                  </div>
                )}
              </div>
            )}

            {/* Paso 2: Calendario y Terapeuta */}
            {currentStep === 'calendar' && (
              <div className="space-y-8">
                <BookingCalendar
                  selectedService={selectedService}
                  therapists={therapists}
                  availableSlots={availableSlots}
                  selectedTherapist={selectedTherapist}
                  selectedDate={selectedDate}
                  selectedTime={selectedTime}
                  onSelectTherapist={setSelectedTherapist}
                  onSelectDate={setSelectedDate}
                  onSelectTime={setSelectedTime}
                  onConfirmBooking={handleConfirmBooking}
                />

                <div className="flex justify-between">
                  <button
                    onClick={() => setCurrentStep('duration')}
                    className="inline-flex items-center gap-2 px-6 py-3 bg-white/90 backdrop-blur-sm rounded-lg shadow-md hover:shadow-lg transition-all"
                  >
                    <ArrowLeft className="w-4 h-4" style={{ color: '#6E3CBC' }} />
                    <span style={{ color: '#6E3CBC' }}>Volver</span>
                  </button>
                </div>
              </div>
            )}

            {/* Paso 3: Confirmación y Pago */}
            {currentStep === 'confirmation' && (
              <div className="space-y-8">
                <div className="bg-white/90 backdrop-blur-sm rounded-3xl p-8 shadow-xl border-2" style={{ borderColor: '#FFD700' }}>
                  <div className="text-center p-12">
                    <div className="w-24 h-24 mx-auto mb-6 rounded-full flex items-center justify-center"
                      style={{ background: 'linear-gradient(135deg, #FFD700, #FFA500)' }}>
                      <DollarSign className="w-12 h-12 text-white" />
                    </div>
                    <h3 className="text-3xl font-bold mb-4" style={{ color: '#6E3CBC' }}>
                      Confirmar Pago
                    </h3>

                    <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-6 mb-8">
                      <div className="space-y-4">
                        <div className="flex justify-between items-center">
                          <span className="font-medium text-gray-700">Servicio:</span>
                          <span className="text-purple-700 font-semibold">{selectedService?.name}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="font-medium text-gray-700">Terapeuta:</span>
                          <span className="text-purple-700 font-semibold">{selectedTherapist?.name}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="font-medium text-gray-700">Fecha:</span>
                          <span className="text-purple-700 font-semibold">{selectedDate}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="font-medium text-gray-700">Hora:</span>
                          <span className="text-purple-700 font-semibold">{selectedTime}</span>
                        </div>
                        <div className="flex justify-between items-center pt-4 border-t-2" style={{ borderColor: '#FFD700' }}>
                          <span className="font-bold text-gray-800">Total:</span>
                          <span className="text-3xl font-bold" style={{ color: '#6E3CBC' }}>${selectedService?.price} USD</span>
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-center gap-4">
                      <button
                        onClick={startSession}
                        className="px-8 py-4 text-white font-semibold rounded-2xl hover:shadow-lg transition-all"
                        style={{ background: 'linear-gradient(135deg, #10B981, #059669)' }}
                      >
                        Confirmar y Comenzar Sesión
                      </button>
                      <button
                        onClick={() => setCurrentStep('calendar')}
                        className="px-8 py-4 bg-gray-300 text-gray-700 rounded-2xl hover:bg-gray-400 transition-all"
                      >
                        Volver
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Paso 4: Sesión Activa */}
            {currentStep === 'session' && (
              <div className="space-y-6">
                {/* Barra de estado */}
                <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-4 shadow-lg border-2" style={{ borderColor: '#FFD700' }}>
                  <div className="flex flex-wrap items-center justify-between gap-4">
                    <div className="flex items-center gap-4">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                        <span className="font-medium" style={{ color: '#6E3CBC' }}>Sesión Activa</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4" style={{ color: '#FFD700' }} />
                        <span className="font-mono text-lg font-semibold" style={{ color: '#6E3CBC' }}>
                          {formatTime(sessionTime)} / {formatTime(baseSessionTime)}
                        </span>
                      </div>
                      {isRecording && (
                        <div className="flex items-center gap-2 px-3 py-1 bg-red-100 text-red-700 rounded-full">
                          <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                          <span className="text-sm font-medium">Grabando</span>
                        </div>
                      )}
                    </div>

                    <button
                      onClick={endSession}
                      className="flex items-center gap-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                    >
                      <PhoneOff className="w-4 h-4" />
                      <span>Finalizar</span>
                    </button>
                  </div>
                </div>

                {/* Área de video */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* Video principal */}
                  <div className="lg:col-span-2 space-y-4">
                    {/* Video del lector */}
                    <div className="relative bg-black rounded-2xl overflow-hidden shadow-2xl border-4" style={{ borderColor: '#FFD700' }}>
                      <video
                        ref={remoteVideoRef}
                        autoPlay
                        playsInline
                        className="w-full h-64 md:h-80 object-cover"
                      />
                      <div className="absolute bottom-4 left-4 bg-black/70 backdrop-blur-sm rounded-lg px-3 py-2">
                        <span className="text-white font-medium">{selectedTherapist?.name}</span>
                      </div>

                      {/* Cartas compartidas en AR */}
                      {sharedCards.length > 0 && (
                        <div className="absolute top-4 right-4 space-y-2">
                          {sharedCards.map((card, index) => (
                            <div key={index} className="bg-white/95 backdrop-blur-sm rounded-lg p-3 shadow-lg border-2" style={{ borderColor: '#FFD700' }}>
                              <div className="text-2xl mb-1">{card.icon}</div>
                              <div className="text-sm font-medium" style={{ color: '#6E3CBC' }}>{card.name}</div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Video propio */}
                    <div className="relative">
                      <video
                        ref={localVideoRef}
                        autoPlay
                        playsInline
                        muted
                        className="w-32 h-24 object-cover rounded-lg shadow-lg border-2"
                        style={{ borderColor: '#FFD700' }}
                      />
                      <div className="absolute bottom-1 left-1 bg-black/70 backdrop-blur-sm rounded px-2 py-1">
                        <span className="text-white text-xs">Tú</span>
                      </div>
                    </div>

                    {/* Controles */}
                    <div className="flex justify-center gap-4">
                      <button
                        onClick={() => setVideoEnabled(!videoEnabled)}
                        className={`p-3 rounded-full transition-colors ${
                          videoEnabled
                            ? 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                            : 'bg-red-500 text-white hover:bg-red-600'
                        }`}
                      >
                        {videoEnabled ? <Video className="w-5 h-5" /> : <VideoOff className="w-5 h-5" />}
                      </button>
                      <button
                        onClick={() => setAudioEnabled(!audioEnabled)}
                        className={`p-3 rounded-full transition-colors ${
                          audioEnabled
                            ? 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                            : 'bg-red-500 text-white hover:bg-red-600'
                        }`}
                      >
                        {audioEnabled ? <Mic className="w-5 h-5" /> : <MicOff className="w-5 h-5" />}
                      </button>
                      <button
                        onClick={() => shareCardAR('Carta del Arcángel Miguel')}
                        className="p-3 rounded-full transition-colors"
                        style={{ background: 'linear-gradient(135deg, #6E3CBC, #9C27B0)', color: 'white' }}
                      >
                        <Share2 className="w-5 h-5" />
                      </button>
                      <button className="p-3 bg-green-500 text-white rounded-full hover:bg-green-600 transition-colors">
                        <Download className="w-5 h-5" />
                      </button>
                    </div>
                  </div>

                  {/* Chat lateral */}
                  <div className="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl border-2" style={{ borderColor: '#FFD700' }}>
                    <div className="p-4 border-b border-gray-200">
                      <h4 className="font-semibold flex items-center gap-2" style={{ color: '#6E3CBC' }}>
                        <MessageSquare className="w-5 h-5" style={{ color: '#FFD700' }} />
                        Chat Angelical
                      </h4>
                    </div>

                    <div
                      ref={chatRef}
                      className="h-64 overflow-y-auto p-4 space-y-3"
                    >
                      {chatMessages.map((message) => (
                        <div
                          key={message.id}
                          className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                          <div
                            className={`max-w-xs px-3 py-2 rounded-lg ${
                              message.sender === 'user'
                                ? 'text-white'
                                : 'bg-gray-200 text-gray-800'
                            }`}
                            style={message.sender === 'user' ? { background: 'linear-gradient(135deg, #6E3CBC, #9C27B0)' } : {}}
                          >
                            <p className="text-sm">{message.text}</p>
                            <p className="text-xs opacity-70 mt-1">{message.timestamp}</p>

                            {message.cardData && (
                              <div className="mt-2 p-2 bg-white/20 rounded">
                                <div className="text-lg">{message.cardData.icon}</div>
                                <div className="text-xs">{message.cardData.name}</div>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>

                    <div className="p-4 border-t border-gray-200">
                      <div className="flex gap-2">
                        <input
                          type="text"
                          value={chatInput}
                          onChange={(e) => setChatInput(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                          placeholder="Escribe tu mensaje..."
                          className="flex-1 px-3 py-2 border-2 rounded-lg focus:outline-none"
                          style={{ borderColor: '#FFD700' }}
                        />
                        <button
                          onClick={sendChatMessage}
                          className="px-4 py-2 text-white rounded-lg transition-colors"
                          style={{ background: 'linear-gradient(135deg, #6E3CBC, #9C27B0)' }}
                        >
                          Enviar
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Modal de Extensión */}
            {showExtensionModal && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
                <div className="bg-white rounded-2xl p-6 max-w-md w-full border-4" style={{ borderColor: '#FFD700' }}>
                  <h3 className="text-xl font-bold mb-4" style={{ color: '#6E3CBC' }}>
                    Extender Sesión Angelical
                  </h3>
                  <p className="text-gray-600 mb-6">
                    Tu sesión está por terminar. ¿Deseas extender el tiempo de conexión angelical?
                  </p>

                  <div className="space-y-3 mb-6">
                    {extensions.map((ext) => (
                      <button
                        key={ext.duration}
                        onClick={() => handleExtendSession(ext)}
                        className="w-full flex justify-between items-center p-3 border-2 rounded-lg hover:shadow-md transition-all"
                        style={{ borderColor: '#FFD700' }}
                      >
                        <span className="font-medium">{ext.label}</span>
                        <span className="font-semibold" style={{ color: '#6E3CBC' }}>${ext.price} USD</span>
                      </button>
                    ))}
                  </div>

                  <div className="flex gap-3">
                    <button
                      onClick={() => setShowExtensionModal(false)}
                      className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
                    >
                      Continuar sin extender
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <AngelicalModal
        isOpen={showResultModal}
        onClose={() => setShowResultModal(false)}
        title={resultInfo?.title}
        message={resultInfo?.message}
        type={resultInfo?.type}
        autoClose={true}
        autoCloseDelay={4000}
      />
    </div>
  );
};

export default ConsultasOnlineVivo;
